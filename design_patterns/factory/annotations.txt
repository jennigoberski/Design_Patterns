-#- Factory Method -#-

->> What is that?
->  Creational design pattern that provides an interface for creating objects in a superclass, 
    but allows subclasses to alter the type of objects that will be created.

->> What's the goal of Factory Design Pattern?
->  To help write code that separates creation from use.
    You should create objects in a different place from where you use them.
    Your code doesn't know anything about how the objects are created where
    you use them, which means it'll be easier if you ever need to change the
    objects for another type.

-> The Factory Method pattern suggests that you replace direct object construction calls 
    (using the new operator) with calls to a special factory method. Don’t worry: the 
    objects are still created via the new operator, but it’s being called from within 
    the factory method.

->> What's its limitation?
->  There’s a slight limitation though: subclasses may return different types of products only if 
    these products have a common base class or interface. Also, the factory method in the base 
    class should have its return type declared as this interface.

->> When should I use it?
->  Use the Factory Method when you don’t know beforehand the exact types and dependencies of 
    the objects your code should work with. 

    * The Factory Method separates product construction code from the code that actually uses 
    the product. Therefore it’s easier to extend the product construction code independently 
    from the rest of the code. For example, to add a new product type to the app, you’ll only 
    need to create a new creator subclass and override the factory method in it.

->  Use the Factory Method when you want to provide users of your library or framework with a way 
    to extend its internal components.

    * Inheritance is probably the easiest way to extend the default behavior of a library or framework. 
    But how would the framework recognize that your subclass should be used instead of a standard component?
    The solution is to reduce the code that constructs components across the framework into a single factory 
    method and let anyone override this method in addition to extending the component itself.

-> Use the Factory Method when you want to save system resources by reusing existing objects instead 
    of rebuilding them each time.

    * You often experience this need when dealing with large, resource-intensive objects such as database 
    connections, file systems, and network resources. That’s a lot of code! And it must all be put into a single 
    place so that you don’t pollute the program with duplicate code. Probably the most obvious and convenient 
    place where this code could be placed is the constructor of the class whose objects we’re trying to reuse. 
    However, a constructor must always return new objects by definition. It can’t return existing instances.
    Therefore, you need to have a regular method capable of creating new objects as well as reusing existing 
    ones.

->> Pros of using it?
 -> You avoid tight coupling between the creator and the concrete products.
 -> Single Responsibility Principle. You can move the product creation code into one place in the program, 
    making the code easier to support.
 -> Open/Closed Principle. You can introduce new types of products into the program without breaking existing client code.

 ->> Cons of using it?
 -> The code may become more complicated since you need to introduce a lot of new subclasses to implement the pattern. 
    The best case scenario is when you’re introducing the pattern into an existing hierarchy of creator classes.


    